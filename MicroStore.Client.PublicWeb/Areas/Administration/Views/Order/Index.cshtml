@using MicroStore.Client.PublicWeb.Areas.Administration.Navigation
@using MicroStore.ShoppingGateway.ClinetSdk.Entities.Orderes;
@model MicroStore.Client.PublicWeb.Areas.Administration.Models.Ordering.OrderSearchModel
@{
    UIMenuNavigationManager.SetCurrentMenu(BackEndMenusStandard.Order.Index);

}
<div>
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-12">
                    <h1 class="m-0">Orders</h1>
                </div>
            </div>
        </div>
    </div>
    <section class="content">
        <div class="container-fluid">

            <partial name="_Order.AdvancedSearch" model="Model" />

            <partial name="Grids/_Grid.Orders" model="Model" />
        </div>
    </section>
</div>
@section Scripts{
    <script>
        $(document).ready(function(){
            $("#StartSubmissionDate").inputmask('dd/mm/yyyy', { 'placeholder': 'dd/mm/yyyy' })
            $("#EndSubmissionDate").inputmask('dd/mm/yyyy', { 'placeholder': 'dd/mm/yyyy' })
            var orderTable = $("#OrderTable").DataTable(
                abp.libs.datatables.normalizeConfiguration({
                    ajax: {
                        type: "POST",
                        data: function (data) {
                            data.startSubmissionDate = $("#@Html.IdFor(x=> x.StartSubmissionDate)").val();
                            data.endSubmissionDate = $("#@Html.IdFor(x=> x.EndSubmissionDate)").val();
                            data.orderNumber = $("#@Html.IdFor(x=> x.OrderNumber)").val();
                            data.states = $("#@Html.IdFor(x=> x.States)").val();
                        }
                    },
                    paging: true,
                    serverSide: true,
                    processing : true,
                    searching: false,
                    ordering: false,
                    columnDefs: [
                        {
                            title: "Order Number",
                            data: "orderNumber",
                            render: function (data, type, row) {
                                const orderNumber = row.orderNumber;

                                const arr = []

                                for (var i = 0; i < orderNumber.length; i++) {
                                    if (i % 3 == 0) {
                                        arr.push(orderNumber.substring(i, i + 3))
                                    }
                                }

                                return arr.join(" ")
                            }
                        },
                        {
                            title: "Customer",
                            data: "user",
                            render: function (data, type, row) {
                                return row.user.firstName + " " + row.user.lastName;
                            }
                        },

                        {
                            title: "State",
                            data: "currentState",
                            render: function(data, type,row){

                                var badgebg;
                                switch (row.currentState.toLowerCase()) {
                                    case "completed":
                                        badgebg = "bg-success";
                                        break;
                                    case "cancelled":
                                        badgebg = "bg-danger";
                                        break;
                                    case "fullfilled":
                                        badgebg = "bg-warning";
                                        break;
                                    case "Approved":
                                        badgebg = "bg-info";
                                        break;
                                    default:
                                        badgebg = "bg-secondary"
                                        break;

                                }
                                return `<span class='badge ${badgebg}  text-bg-light'>${row.currentState}</span>`
                            }
                        },
                        {
                            title: "Total Price",
                            data: "totalPrice",
                            render: function (data, type, row) {
                                var priceFormat = new Intl.NumberFormat('en-US', {
                                    style: 'currency',
                                    currency: 'USD',
                                })

                                return priceFormat.format(row.totalPrice)
                            },
                        },
                        {
                            title: "Actions",
                            render: function (data, type, row) {
                                return `<a href="Order/Details/${row.id}" class="btn btn-info"> View</a>`
                            },

                        }
                    ],
                })
            )

            $("#States").select2({
                placeholder: 'select order states'
            })


            $("#AdvancedSearchForm").on('submit', function (evt) {
                evt.preventDefault();
                console.log($("#States").val())
                orderTable.ajax.reload();
            });

        })
    </script>
}